================================================================================
top
================================================================================

TEST: top

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
bot
================================================================================

TEST: bot

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
self
================================================================================

TEST: self

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
instance
================================================================================

TEST: instance

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
class
================================================================================
TEST: class
--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
nil
================================================================================

TEST: nil

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
bool
================================================================================

TEST: bool

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
void
================================================================================

TEST: void

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
untyped
================================================================================

TEST: untyped

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (builtin_type))))

================================================================================
Empty double quoted string
================================================================================

TEST: ""

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (string_literal)))))

================================================================================
Double quoted string
================================================================================

TEST: "Hello world 12345"

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (string_literal)))))

================================================================================
Empty single quoted string
================================================================================

TEST: ''

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (string_literal)))))

================================================================================
Single quoted string
================================================================================

TEST: 'Hello world 12345'

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (string_literal)))))

================================================================================
Simple symbol
================================================================================

TEST: :hello_world

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (symbol_literal)))))

================================================================================
Delimited single quoted symbol
================================================================================

TEST: :'hello_world'

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (symbol_literal)))))

================================================================================
Delimited double quoted symbol
================================================================================

TEST: :"hello_world"

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (symbol_literal)))))

================================================================================
Integer
================================================================================

TEST: 999

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (integer_literal)))))

================================================================================
Integer with underscore
================================================================================

TEST: 1_000

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (integer_literal)))))

================================================================================
true
================================================================================

TEST: true

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (true_literal)))))

================================================================================
false
================================================================================

TEST: false

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (literal_type
        (false_literal)))))

================================================================================
Class singleton type
================================================================================

TEST: singleton(Foobar)

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (class_singleton_type
        (class_name)))))

================================================================================
Empty record type
================================================================================

TEST: {}

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (record_type))))

================================================================================
Record type
================================================================================

TEST: { foo: String, bar: Integer }

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (record_type
        (hash_key)
        (type
          (namespaceable_type
            (class_name)))
        (hash_key)
        (type
          (namespaceable_type
            (class_name)))))))

================================================================================
Empty tuple type
================================================================================

TEST: []

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (tuple_type))))

================================================================================
Tuple type
================================================================================

TEST: [String, Integer]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (tuple_type
        (type
          (namespaceable_type
            (class_name)))
        (type
          (namespaceable_type
            (class_name)))))))

================================================================================
Proc type with no parameters
================================================================================

TEST: ^() -> untyped

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (proc_type
        (parameters)
        (type
          (builtin_type))))))

================================================================================
Proc type with parameters
================================================================================

TEST: ^(String) -> untyped

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (proc_type
        (parameters
          (parameter
            (type
              (namespaceable_type
                (class_name)))))
        (type
          (builtin_type))))))

================================================================================
Single union
================================================================================

TEST: bool | nil

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (operator_type
        (union_type
          (type
            (builtin_type))
          (type
            (builtin_type)))))))

================================================================================
Multiple unions
================================================================================

TEST: bool | instance | nil

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (operator_type
        (union_type
          (type
            (builtin_type))
          (type
            (operator_type
              (union_type
                (type
                  (builtin_type))
                (type
                  (builtin_type))))))))))

================================================================================
Single intersection
================================================================================

TEST: bool & nil

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (operator_type
        (intersection_type
          (type
            (builtin_type))
          (type
            (builtin_type)))))))

================================================================================
Multiple intersections
================================================================================

TEST: bool & instance & nil

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (operator_type
        (intersection_type
          (type
            (builtin_type))
          (type
            (operator_type
              (intersection_type
                (type
                  (builtin_type))
                (type
                  (builtin_type))))))))))

================================================================================
Optional type
================================================================================

TEST: bool?

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (operator_type
        (optional_type
          (type
            (builtin_type)))))))

================================================================================
Class name type
================================================================================

TEST: Foobar

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (class_name)))))

================================================================================
Class name with type arguments
================================================================================

TEST: Collection[String]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (class_name)
        (type_arguments
          (type
            (namespaceable_type
              (class_name))))))))

================================================================================
Nested class name type
================================================================================

TEST: Foobar::Baz

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (class_name
          (namespace))))))

================================================================================
Nested class name with type arguments
================================================================================

TEST: Foobar::Collection[String, Integer]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (class_name
          (namespace))
        (type_arguments
          (type
            (namespaceable_type
              (class_name)))
          (type
            (namespaceable_type
              (class_name))))))))

================================================================================
Interface name type
================================================================================

TEST: _Foobar

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (interface_name)))))

================================================================================
Interface name with type arguments
================================================================================

TEST: _Foobar[T]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (interface_name)
        (type_arguments
          (type
            (namespaceable_type
              (class_name))))))))

================================================================================
Nested interface name type
================================================================================

TEST: Foobar::_Baz

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (interface_name
          (namespace))))))

================================================================================
Nested interface name with type arguments
================================================================================

TEST: Foobar::_Baz[Integer]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (interface_name
          (namespace))
        (type_arguments
          (type
            (namespaceable_type
              (class_name))))))))

================================================================================
Alias name type
================================================================================

TEST: foobar

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (alias_name)))))

================================================================================
Alias name with type arguments
================================================================================

TEST: foobar[T]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (alias_name)
        (type_arguments
          (type
            (namespaceable_type
              (class_name))))))))

================================================================================
Nested alias name type
================================================================================

TEST: Foobar::baz

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (alias_name
          (namespace))))))

================================================================================
Nested alias name with type arguments
================================================================================

TEST: Foobar::baz[T]

--------------------------------------------------------------------------------

(program
  (constant_declaration
    (constant_name)
    (type
      (namespaceable_type
        (alias_name
          (namespace))
        (type_arguments
          (type
            (namespaceable_type
              (class_name))))))))
